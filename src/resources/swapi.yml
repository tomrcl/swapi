openapi: 3.0.1
info:
  title: Swagger Petstore
  description: >-
    This is a sample server Petstore server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).      For this sample, you can use the api
    key `special-key` to test the authorization     filters.
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://petstore.swagger.io/v2'
  - url: 'http://petstore.swagger.io/v2'
tags:
  - name: people
    description: ABC
paths:
  /42:
    get:
      summary: get 42
      operationId: 42
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
  /people:
    summary: >-
      A People resource is an individual person or character within the Star
      Wars universe.
    get:
      summary: get all the people resources
      description: ''
      operationId: getPeople
      responses:
        default:
          description: Default error sample response
      tags:
        - people
  '/people/{id}':
    get:
      summary: get a specific people resource
      description: ''
      operationId: getPeopleById
      parameters:
        - name: id
          in: path
          description: 'id of the people'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/People'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: People not found
          content: {}
      tags:
        - people
components:
  schemas:
    People:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
